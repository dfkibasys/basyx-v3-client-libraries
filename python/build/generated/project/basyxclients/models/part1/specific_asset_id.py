# coding: utf-8

"""
    DotAAS Part 1 | Metamodel | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 1](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from basyxclients.models.part1.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class SpecificAssetId(BaseModel):
    """
    SpecificAssetId
    """ # noqa: E501
    semantic_id: Optional[Reference] = Field(default=None, alias="semanticId")
    supplemental_semantic_ids: Optional[Annotated[List[Reference], Field(min_length=1)]] = Field(default=None, alias="supplementalSemanticIds")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    value: Annotated[str, Field(min_length=1, strict=True, max_length=2000)]
    external_subject_id: Optional[Reference] = Field(default=None, alias="externalSubjectId")
    __properties: ClassVar[List[str]] = ["semanticId", "supplementalSemanticIds", "name", "value", "externalSubjectId"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    @field_validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpecificAssetId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of semantic_id
        if self.semantic_id:
            _dict['semanticId'] = self.semantic_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supplemental_semantic_ids (list)
        _items = []
        if self.supplemental_semantic_ids:
            for _item in self.supplemental_semantic_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supplementalSemanticIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of external_subject_id
        if self.external_subject_id:
            _dict['externalSubjectId'] = self.external_subject_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpecificAssetId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "semanticId": Reference.from_dict(obj["semanticId"]) if obj.get("semanticId") is not None else None,
            "supplementalSemanticIds": [Reference.from_dict(_item) for _item in obj["supplementalSemanticIds"]] if obj.get("supplementalSemanticIds") is not None else None,
            "name": obj.get("name"),
            "value": obj.get("value"),
            "externalSubjectId": Reference.from_dict(obj["externalSubjectId"]) if obj.get("externalSubjectId") is not None else None
        })
        return _obj


