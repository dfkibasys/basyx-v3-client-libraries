# coding: utf-8

"""
    DotAAS Part 1 | Metamodel | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 1](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EventPayload(BaseModel):
    """
    EventPayload
    """ # noqa: E501
    source: Reference
    source_semantic_id: Optional[Reference] = Field(default=None, alias="sourceSemanticId")
    observable_reference: Reference = Field(alias="observableReference")
    observable_semantic_id: Optional[Reference] = Field(default=None, alias="observableSemanticId")
    topic: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = None
    subject_id: Optional[Reference] = Field(default=None, alias="subjectId")
    time_stamp: Annotated[str, Field(strict=True)] = Field(alias="timeStamp")
    payload: Optional[Union[StrictBytes, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["source", "sourceSemanticId", "observableReference", "observableSemanticId", "topic", "subjectId", "timeStamp", "payload"]

    @field_validator('time_stamp')
    def time_stamp_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\.[0-9]+)?)|24:00:00(\.0+)?)(Z|\+00:00|-00:00)$", value):
            raise ValueError(r"must validate the regular expression /^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\.[0-9]+)?)|24:00:00(\.0+)?)(Z|\+00:00|-00:00)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_semantic_id
        if self.source_semantic_id:
            _dict['sourceSemanticId'] = self.source_semantic_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observable_reference
        if self.observable_reference:
            _dict['observableReference'] = self.observable_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observable_semantic_id
        if self.observable_semantic_id:
            _dict['observableSemanticId'] = self.observable_semantic_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject_id
        if self.subject_id:
            _dict['subjectId'] = self.subject_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": Reference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "sourceSemanticId": Reference.from_dict(obj["sourceSemanticId"]) if obj.get("sourceSemanticId") is not None else None,
            "observableReference": Reference.from_dict(obj["observableReference"]) if obj.get("observableReference") is not None else None,
            "observableSemanticId": Reference.from_dict(obj["observableSemanticId"]) if obj.get("observableSemanticId") is not None else None,
            "topic": obj.get("topic"),
            "subjectId": Reference.from_dict(obj["subjectId"]) if obj.get("subjectId") is not None else None,
            "timeStamp": obj.get("timeStamp"),
            "payload": obj.get("payload")
        })
        return _obj

from basyxclients.models.part1.reference import Reference
# TODO: Rewrite to not use raise_errors
EventPayload.model_rebuild(raise_errors=False)

