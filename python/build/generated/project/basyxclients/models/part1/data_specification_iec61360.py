# coding: utf-8

"""
    DotAAS Part 1 | Metamodel | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 1](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DataSpecificationIec61360(BaseModel):
    """
    DataSpecificationIec61360
    """ # noqa: E501
    preferred_name: Annotated[List[LangStringPreferredNameTypeIec61360], Field(min_length=1)] = Field(alias="preferredName")
    short_name: Optional[Annotated[List[LangStringShortNameTypeIec61360], Field(min_length=1)]] = Field(default=None, alias="shortName")
    unit: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    unit_id: Optional[Reference] = Field(default=None, alias="unitId")
    source_of_definition: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="sourceOfDefinition")
    symbol: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    data_type: Optional[DataTypeIec61360] = Field(default=None, alias="dataType")
    definition: Optional[Annotated[List[LangStringDefinitionTypeIec61360], Field(min_length=1)]] = None
    value_format: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="valueFormat")
    value_list: Optional[ValueList] = Field(default=None, alias="valueList")
    value: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = None
    level_type: Optional[LevelType] = Field(default=None, alias="levelType")
    model_type: StrictStr = Field(alias="modelType")
    __properties: ClassVar[List[str]] = ["preferredName", "shortName", "unit", "unitId", "sourceOfDefinition", "symbol", "dataType", "definition", "valueFormat", "valueList", "value", "levelType", "modelType"]

    @field_validator('unit')
    def unit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    @field_validator('source_of_definition')
    def source_of_definition_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    @field_validator('symbol')
    def symbol_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    @field_validator('value_format')
    def value_format_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    @field_validator('value')
    def value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$", value):
            raise ValueError(r"must validate the regular expression /^([\t\n\r -\ud7ff\ue000-\ufffd]|\ud800[\udc00-\udfff]|[\ud801-\udbfe][\udc00-\udfff]|\udbff[\udc00-\udfff])*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSpecificationIec61360 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in preferred_name (list)
        _items = []
        if self.preferred_name:
            for _item_preferred_name in self.preferred_name:
                if _item_preferred_name:
                    _items.append(_item_preferred_name.to_dict())
            _dict['preferredName'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in short_name (list)
        _items = []
        if self.short_name:
            for _item_short_name in self.short_name:
                if _item_short_name:
                    _items.append(_item_short_name.to_dict())
            _dict['shortName'] = _items
        # override the default output from pydantic by calling `to_dict()` of unit_id
        if self.unit_id:
            _dict['unitId'] = self.unit_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in definition (list)
        _items = []
        if self.definition:
            for _item_definition in self.definition:
                if _item_definition:
                    _items.append(_item_definition.to_dict())
            _dict['definition'] = _items
        # override the default output from pydantic by calling `to_dict()` of value_list
        if self.value_list:
            _dict['valueList'] = self.value_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of level_type
        if self.level_type:
            _dict['levelType'] = self.level_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSpecificationIec61360 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "preferredName": [LangStringPreferredNameTypeIec61360.from_dict(_item) for _item in obj["preferredName"]] if obj.get("preferredName") is not None else None,
            "shortName": [LangStringShortNameTypeIec61360.from_dict(_item) for _item in obj["shortName"]] if obj.get("shortName") is not None else None,
            "unit": obj.get("unit"),
            "unitId": Reference.from_dict(obj["unitId"]) if obj.get("unitId") is not None else None,
            "sourceOfDefinition": obj.get("sourceOfDefinition"),
            "symbol": obj.get("symbol"),
            "dataType": obj.get("dataType"),
            "definition": [LangStringDefinitionTypeIec61360.from_dict(_item) for _item in obj["definition"]] if obj.get("definition") is not None else None,
            "valueFormat": obj.get("valueFormat"),
            "valueList": ValueList.from_dict(obj["valueList"]) if obj.get("valueList") is not None else None,
            "value": obj.get("value"),
            "levelType": LevelType.from_dict(obj["levelType"]) if obj.get("levelType") is not None else None,
            "modelType": obj.get("modelType") if obj.get("modelType") is not None else 'DataSpecificationIec61360'
        })
        return _obj

from basyxclients.models.part1.data_type_iec61360 import DataTypeIec61360
from basyxclients.models.part1.lang_string_definition_type_iec61360 import LangStringDefinitionTypeIec61360
from basyxclients.models.part1.lang_string_preferred_name_type_iec61360 import LangStringPreferredNameTypeIec61360
from basyxclients.models.part1.lang_string_short_name_type_iec61360 import LangStringShortNameTypeIec61360
from basyxclients.models.part1.level_type import LevelType
from basyxclients.models.part1.reference import Reference
from basyxclients.models.part1.value_list import ValueList
# TODO: Rewrite to not use raise_errors
DataSpecificationIec61360.model_rebuild(raise_errors=False)

