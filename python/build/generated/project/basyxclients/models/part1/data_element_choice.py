# coding: utf-8

"""
    DotAAS Part 1 | Metamodel | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 1](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DATAELEMENTCHOICE_ONE_OF_SCHEMAS = ["Blob", "File", "ModelProperty", "MultiLanguageProperty", "Range", "ReferenceElement"]

class DataElementChoice(BaseModel):
    """
    DataElementChoice
    """
    # data type: Blob
    oneof_schema_1_validator: Optional[Blob] = None
    # data type: File
    oneof_schema_2_validator: Optional[File] = None
    # data type: MultiLanguageProperty
    oneof_schema_3_validator: Optional[MultiLanguageProperty] = None
    # data type: ModelProperty
    oneof_schema_4_validator: Optional[ModelProperty] = None
    # data type: Range
    oneof_schema_5_validator: Optional[Range] = None
    # data type: ReferenceElement
    oneof_schema_6_validator: Optional[ReferenceElement] = None
    actual_instance: Optional[Union[Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement]] = None
    one_of_schemas: Set[str] = { "Blob", "File", "ModelProperty", "MultiLanguageProperty", "Range", "ReferenceElement" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {
        'Blob': 'Blob',
        'File': 'File',
        'MultiLanguageProperty': 'MultiLanguageProperty',
        'Property': 'ModelProperty',
        'Range': 'Range',
        'ReferenceElement': 'ReferenceElement'
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DataElementChoice.model_construct()
        error_messages = []
        match = 0
        # validate data type: Blob
        if not isinstance(v, Blob):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Blob`")
        else:
            match += 1
        # validate data type: File
        if not isinstance(v, File):
            error_messages.append(f"Error! Input type `{type(v)}` is not `File`")
        else:
            match += 1
        # validate data type: MultiLanguageProperty
        if not isinstance(v, MultiLanguageProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiLanguageProperty`")
        else:
            match += 1
        # validate data type: ModelProperty
        if not isinstance(v, ModelProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelProperty`")
        else:
            match += 1
        # validate data type: Range
        if not isinstance(v, Range):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Range`")
        else:
            match += 1
        # validate data type: ReferenceElement
        if not isinstance(v, ReferenceElement):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReferenceElement`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DataElementChoice with oneOf schemas: Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DataElementChoice with oneOf schemas: Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("modelType")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `modelType` in the input.")

        # check if data type is `Blob`
        if _data_type == "Blob":
            instance.actual_instance = Blob.from_json(json_str)
            return instance

        # check if data type is `File`
        if _data_type == "File":
            instance.actual_instance = File.from_json(json_str)
            return instance

        # check if data type is `MultiLanguageProperty`
        if _data_type == "MultiLanguageProperty":
            instance.actual_instance = MultiLanguageProperty.from_json(json_str)
            return instance

        # check if data type is `ModelProperty`
        if _data_type == "Property":
            instance.actual_instance = ModelProperty.from_json(json_str)
            return instance

        # check if data type is `Range`
        if _data_type == "Range":
            instance.actual_instance = Range.from_json(json_str)
            return instance

        # check if data type is `ReferenceElement`
        if _data_type == "ReferenceElement":
            instance.actual_instance = ReferenceElement.from_json(json_str)
            return instance

        # deserialize data into Blob
        try:
            instance.actual_instance = Blob.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into File
        try:
            instance.actual_instance = File.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiLanguageProperty
        try:
            instance.actual_instance = MultiLanguageProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelProperty
        try:
            instance.actual_instance = ModelProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Range
        try:
            instance.actual_instance = Range.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReferenceElement
        try:
            instance.actual_instance = ReferenceElement.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DataElementChoice with oneOf schemas: Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DataElementChoice with oneOf schemas: Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Blob, File, ModelProperty, MultiLanguageProperty, Range, ReferenceElement]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from basyxclients.models.part1.blob import Blob
from basyxclients.models.part1.file import File
from basyxclients.models.part1.model_property import ModelProperty
from basyxclients.models.part1.multi_language_property import MultiLanguageProperty
from basyxclients.models.part1.range import Range
from basyxclients.models.part1.reference_element import ReferenceElement
# TODO: Rewrite to not use raise_errors
DataElementChoice.model_rebuild(raise_errors=False)

