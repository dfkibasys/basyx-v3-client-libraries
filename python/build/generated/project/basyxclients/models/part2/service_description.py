# coding: utf-8

"""
    DotAAS Part 2 | API | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceDescription(BaseModel):
    """
    The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
    """ # noqa: E501
    profiles: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = None
    __properties: ClassVar[List[str]] = ["profiles"]

    @field_validator('profiles')
    def profiles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003', 'https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004', 'https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001']):
                raise ValueError("each list item must be one of ('https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003', 'https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003', 'https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004', 'https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profiles": obj.get("profiles")
        })
        return _obj


