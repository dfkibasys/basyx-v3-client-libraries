# coding: utf-8

"""
    DotAAS Part 2 | API | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from basyxclients.models.part1.administrative_information import AdministrativeInformation
from basyxclients.models.part1.asset_kind import AssetKind
from basyxclients.models.part2.endpoint import Endpoint
from basyxclients.models.part1.extension import Extension
from basyxclients.models.part1.lang_string_name_type import LangStringNameType
from basyxclients.models.part1.lang_string_text_type import LangStringTextType
from basyxclients.models.part1.specific_asset_id import SpecificAssetId
from basyxclients.models.part2.submodel_descriptor import SubmodelDescriptor
from typing import Optional, Set
from typing_extensions import Self

class AssetAdministrationShellDescriptor(BaseModel):
    """
    AssetAdministrationShellDescriptor
    """ # noqa: E501
    description: Optional[List[LangStringTextType]] = None
    display_name: Optional[List[LangStringNameType]] = Field(default=None, alias="displayName")
    extensions: Optional[Annotated[List[Extension], Field(min_length=1)]] = None
    administration: Optional[AdministrativeInformation] = None
    asset_kind: Optional[AssetKind] = Field(default=None, alias="assetKind")
    asset_type: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, alias="assetType")
    endpoints: Optional[Annotated[List[Endpoint], Field(min_length=1)]] = None
    global_asset_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, alias="globalAssetId")
    id_short: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="idShort")
    id: Annotated[str, Field(min_length=1, strict=True, max_length=2000)]
    specific_asset_ids: Optional[List[SpecificAssetId]] = Field(default=None, alias="specificAssetIds")
    submodel_descriptors: Optional[List[SubmodelDescriptor]] = Field(default=None, alias="submodelDescriptors")
    __properties: ClassVar[List[str]] = ["description", "displayName", "extensions", "administration", "assetKind", "assetType", "endpoints", "globalAssetId", "idShort", "id", "specificAssetIds", "submodelDescriptors"]

    @field_validator('asset_type')
    def asset_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$", value):
            raise ValueError(r"must validate the regular expression /^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$/")
        return value

    @field_validator('global_asset_id')
    def global_asset_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$", value):
            raise ValueError(r"must validate the regular expression /^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$", value):
            raise ValueError(r"must validate the regular expression /^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetAdministrationShellDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in description (list)
        _items = []
        if self.description:
            for _item in self.description:
                if _item:
                    _items.append(_item.to_dict())
            _dict['description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in display_name (list)
        _items = []
        if self.display_name:
            for _item in self.display_name:
                if _item:
                    _items.append(_item.to_dict())
            _dict['displayName'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of administration
        if self.administration:
            _dict['administration'] = self.administration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item in self.endpoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in specific_asset_ids (list)
        _items = []
        if self.specific_asset_ids:
            for _item in self.specific_asset_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specificAssetIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in submodel_descriptors (list)
        _items = []
        if self.submodel_descriptors:
            for _item in self.submodel_descriptors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['submodelDescriptors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetAdministrationShellDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": [LangStringTextType.from_dict(_item) for _item in obj["description"]] if obj.get("description") is not None else None,
            "displayName": [LangStringNameType.from_dict(_item) for _item in obj["displayName"]] if obj.get("displayName") is not None else None,
            "extensions": [Extension.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "administration": AdministrativeInformation.from_dict(obj["administration"]) if obj.get("administration") is not None else None,
            "assetKind": obj.get("assetKind"),
            "assetType": obj.get("assetType"),
            "endpoints": [Endpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "globalAssetId": obj.get("globalAssetId"),
            "idShort": obj.get("idShort"),
            "id": obj.get("id"),
            "specificAssetIds": [SpecificAssetId.from_dict(_item) for _item in obj["specificAssetIds"]] if obj.get("specificAssetIds") is not None else None,
            "submodelDescriptors": [SubmodelDescriptor.from_dict(_item) for _item in obj["submodelDescriptors"]] if obj.get("submodelDescriptors") is not None else None
        })
        return _obj


