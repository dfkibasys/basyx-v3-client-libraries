# coding: utf-8

"""
    DotAAS Part 2 | API | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProtocolInformation(BaseModel):
    """
    ProtocolInformation
    """ # noqa: E501
    href: Annotated[str, Field(strict=True, max_length=2048)]
    endpoint_protocol: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="endpointProtocol")
    endpoint_protocol_version: Optional[List[Annotated[str, Field(strict=True, max_length=128)]]] = Field(default=None, alias="endpointProtocolVersion")
    subprotocol: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    subprotocol_body: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="subprotocolBody")
    subprotocol_body_encoding: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="subprotocolBodyEncoding")
    security_attributes: Optional[Annotated[List[ProtocolInformationSecurityAttributes], Field(min_length=1)]] = Field(default=None, alias="securityAttributes")
    __properties: ClassVar[List[str]] = ["href", "endpointProtocol", "endpointProtocolVersion", "subprotocol", "subprotocolBody", "subprotocolBodyEncoding", "securityAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtocolInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in security_attributes (list)
        _items = []
        if self.security_attributes:
            for _item_security_attributes in self.security_attributes:
                if _item_security_attributes:
                    _items.append(_item_security_attributes.to_dict())
            _dict['securityAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtocolInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "href": obj.get("href"),
            "endpointProtocol": obj.get("endpointProtocol"),
            "endpointProtocolVersion": obj.get("endpointProtocolVersion"),
            "subprotocol": obj.get("subprotocol"),
            "subprotocolBody": obj.get("subprotocolBody"),
            "subprotocolBodyEncoding": obj.get("subprotocolBodyEncoding"),
            "securityAttributes": [ProtocolInformationSecurityAttributes.from_dict(_item) for _item in obj["securityAttributes"]] if obj.get("securityAttributes") is not None else None
        })
        return _obj

from basyxclients.models.part2.protocol_information_security_attributes import ProtocolInformationSecurityAttributes
# TODO: Rewrite to not use raise_errors
ProtocolInformation.model_rebuild(raise_errors=False)

