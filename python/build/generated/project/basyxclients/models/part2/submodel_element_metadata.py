# coding: utf-8

"""
    DotAAS Part 2 | API | Schemas

    The schemas implementing the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023

    The version of the OpenAPI document: V3.0.1
    Contact: info@idtwin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from basyxclients.models.part2.basic_event_element_metadata import BasicEventElementMetadata
from basyxclients.models.part2.entity_metadata import EntityMetadata
from basyxclients.models.part2.file_metadata import FileMetadata
from basyxclients.models.part2.multi_language_property_metadata import MultiLanguagePropertyMetadata
from basyxclients.models.part2.operation_metadata import OperationMetadata
from basyxclients.models.part2.property_metadata import PropertyMetadata
from basyxclients.models.part2.range_metadata import RangeMetadata
from basyxclients.models.part2.reference_element_metadata import ReferenceElementMetadata
from basyxclients.models.part2.relationship_element_metadata import RelationshipElementMetadata
from basyxclients.models.part2.submodel_element_attributes import SubmodelElementAttributes
from basyxclients.models.part2.submodel_element_collection_metadata import SubmodelElementCollectionMetadata
from basyxclients.models.part2.submodel_element_list_metadata import SubmodelElementListMetadata
from pydantic import StrictStr, Field
from typing import Union, List, Optional, Dict
from typing_extensions import Literal, Self

SUBMODELELEMENTMETADATA_ONE_OF_SCHEMAS = ["SubmodelElementAttributes"]

class SubmodelElementMetadata(BaseModel):
    """
    SubmodelElementMetadata
    """
    # data type: SubmodelElementAttributes
    oneof_schema_1_validator: Optional[SubmodelElementAttributes] = None
    # data type: FileMetadata
    oneof_schema_2_validator: Optional[FileMetadata] = None
    # data type: CapabilityMetadata
    oneof_schema_3_validator: Optional[CapabilityMetadata] = None
    # data type: EntityMetadata
    oneof_schema_4_validator: Optional[EntityMetadata] = None
    # data type: BasicEventElementMetadata
    oneof_schema_5_validator: Optional[BasicEventElementMetadata] = None
    # data type: MultiLanguagePropertyMetadata
    oneof_schema_6_validator: Optional[MultiLanguagePropertyMetadata] = None
    # data type: OperationMetadata
    oneof_schema_7_validator: Optional[OperationMetadata] = None
    # data type: PropertyMetadata
    oneof_schema_8_validator: Optional[PropertyMetadata] = None
    # data type: RangeMetadata
    oneof_schema_9_validator: Optional[RangeMetadata] = None
    # data type: ReferenceElementMetadata
    oneof_schema_10_validator: Optional[ReferenceElementMetadata] = None
    # data type: SubmodelElementAttributes
    oneof_schema_11_validator: Optional[SubmodelElementAttributes] = None
    # data type: RelationshipElementMetadata
    oneof_schema_12_validator: Optional[RelationshipElementMetadata] = None
    # data type: SubmodelElementListMetadata
    oneof_schema_13_validator: Optional[SubmodelElementListMetadata] = None
    # data type: SubmodelElementCollectionMetadata
    oneof_schema_14_validator: Optional[SubmodelElementCollectionMetadata] = None
    actual_instance: Optional[Union[SubmodelElementAttributes]] = None
    one_of_schemas: List[str] = Field(default=Literal["SubmodelElementAttributes"])

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SubmodelElementMetadata.model_construct()
        error_messages = []
        match = 0
        # validate data type: SubmodelElementAttributes
        if not isinstance(v, SubmodelElementAttributes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubmodelElementAttributes`")
        else:
            match += 1
        # validate data type: FileMetadata
        if not isinstance(v, FileMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileMetadata`")
        else:
            match += 1
        # validate data type: CapabilityMetadata
        if not isinstance(v, CapabilityMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CapabilityMetadata`")
        else:
            match += 1
        # validate data type: EntityMetadata
        if not isinstance(v, EntityMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EntityMetadata`")
        else:
            match += 1
        # validate data type: BasicEventElementMetadata
        if not isinstance(v, BasicEventElementMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BasicEventElementMetadata`")
        else:
            match += 1
        # validate data type: MultiLanguagePropertyMetadata
        if not isinstance(v, MultiLanguagePropertyMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiLanguagePropertyMetadata`")
        else:
            match += 1
        # validate data type: OperationMetadata
        if not isinstance(v, OperationMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OperationMetadata`")
        else:
            match += 1
        # validate data type: PropertyMetadata
        if not isinstance(v, PropertyMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PropertyMetadata`")
        else:
            match += 1
        # validate data type: RangeMetadata
        if not isinstance(v, RangeMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RangeMetadata`")
        else:
            match += 1
        # validate data type: ReferenceElementMetadata
        if not isinstance(v, ReferenceElementMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReferenceElementMetadata`")
        else:
            match += 1
        # validate data type: SubmodelElementAttributes
        if not isinstance(v, SubmodelElementAttributes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubmodelElementAttributes`")
        else:
            match += 1
        # validate data type: RelationshipElementMetadata
        if not isinstance(v, RelationshipElementMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RelationshipElementMetadata`")
        else:
            match += 1
        # validate data type: SubmodelElementListMetadata
        if not isinstance(v, SubmodelElementListMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubmodelElementListMetadata`")
        else:
            match += 1
        # validate data type: SubmodelElementCollectionMetadata
        if not isinstance(v, SubmodelElementCollectionMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubmodelElementCollectionMetadata`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SubmodelElementMetadata with oneOf schemas: SubmodelElementAttributes. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SubmodelElementMetadata with oneOf schemas: SubmodelElementAttributes. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SubmodelElementAttributes
        try:
            instance.actual_instance = SubmodelElementAttributes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileMetadata
        try:
            instance.actual_instance = FileMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CapabilityMetadata
        try:
            instance.actual_instance = CapabilityMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EntityMetadata
        try:
            instance.actual_instance = EntityMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BasicEventElementMetadata
        try:
            instance.actual_instance = BasicEventElementMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiLanguagePropertyMetadata
        try:
            instance.actual_instance = MultiLanguagePropertyMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OperationMetadata
        try:
            instance.actual_instance = OperationMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PropertyMetadata
        try:
            instance.actual_instance = PropertyMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RangeMetadata
        try:
            instance.actual_instance = RangeMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReferenceElementMetadata
        try:
            instance.actual_instance = ReferenceElementMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubmodelElementAttributes
        try:
            instance.actual_instance = SubmodelElementAttributes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RelationshipElementMetadata
        try:
            instance.actual_instance = RelationshipElementMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubmodelElementListMetadata
        try:
            instance.actual_instance = SubmodelElementListMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubmodelElementCollectionMetadata
        try:
            instance.actual_instance = SubmodelElementCollectionMetadata.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SubmodelElementMetadata with oneOf schemas: SubmodelElementAttributes. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SubmodelElementMetadata with oneOf schemas: SubmodelElementAttributes. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], SubmodelElementAttributes]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


