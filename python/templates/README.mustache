-----

# basyx-v3-clients

The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub). Publisher: Industrial Digital Twin Association (IDTA) 2023.

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

  - API version: V3.0.1\_SSP-001
  - Package version: 0.2.0
  - Generator version: 7.14.0
  - Build package: org.openapitools.codegen.languages.PythonClientCodegen

-----

## Requirements

Python 3.9+

-----

## Installation

**1. Set up a Virtual Environment (Recommended)**

It's highly recommended to use a virtual environment (`venv`) to manage dependencies cleanly.

```sh
# Create a virtual environment
python -m venv .venv

# Activate the virtual environment
# On macOS/Linux:
source .venv/bin/activate
# On Windows:
.venv\Scripts\activate
```

**2. Install from GitHub**

Once your virtual environment is activated, install the package directly from the GitHub repository:

```sh
pip install git+https://github.com/dfkibasys/basyx-v3-client-libraries.git@master#subdirectory=python/build/generated/project
```

-----

## Getting Started

After following the installation procedure, you can run the following code:

```python
from basyxclients.api import AssetAdministrationShellRegistryApi
from basyxclients import Configuration
from basyxclients import ApiClient
from basyxclients import ApiException
from pprint import pprint

# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = Configuration(
    host = "http://localhost:8083"
)

# Enter a context with an instance of the API client
with ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = AssetAdministrationShellRegistryApi(api_client)

    # The AAS Identifier is now expected as a standard string.
    # The method will handle the necessary UTF8-BASE64-URL-encoding internally.
    aas_identifier = "myAASId" # str | Example AAS Identifier string

    try:
        # Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        api_instance.delete_asset_administration_shell_descriptor(aas_identifier)
        print("Asset Administration Shell Descriptor deleted successfully.")
    except ApiException as e:
        print("Exception when calling AssetAdministrationShellRegistryApi->delete_asset_administration_shell_descriptor: %s\n" % e)
```

-----

## Handling Polymorphic Models (SubmodelElementChoice)

This client uses **polymorphic models** for certain data structures, such as `SubmodelElementChoice`, which can represent various types like `Property`, `File`, `RelationshipElement`, etc.

When you receive an object that is a `SubmodelElementChoice`, the actual, specific type of the element will be stored in its **`actual_instance`** attribute. To access the properties specific to that element's type, you will need to access this attribute and often use `isinstance()` to determine the exact type:

```python
import basyxclients
from basyxclients.models.part1.submodel_element_choice import SubmodelElementChoice
from basyxclients.models.part1.model_property import ModelProperty
from basyxclients.models.part1.file import File

# This is illustrative; in reality, 'some_element_from_api' would come from a deserialized response
# For demonstration purposes, let's create mock SubmodelElementChoice objects from JSON
mock_property_json = '{"modelType": "Property", "valueType": "xs:string", "value": "myValue", "idShort": "MyProp"}'
mock_file_json = '{"modelType": "File", "contentType": "application/pdf", "value": "file:///doc.pdf", "idShort": "MyFile"}'

# Deserializing a property
element_prop: SubmodelElementChoice = SubmodelElementChoice.from_json(mock_property_json)

# Accessing the actual instance and checking its type
if isinstance(element_prop.actual_instance, ModelProperty):
    print(f"Detected a ModelProperty: {element_prop.actual_instance.id_short}, Value: {element_prop.actual_instance.value}")
elif isinstance(element_prop.actual_instance, File):
    print(f"Detected a File: {element_prop.actual_instance.id_short}, Content Type: {element_prop.actual_instance.content_type}")
else:
    print(f"Detected an unknown SubmodelElement type: {type(element_prop.actual_instance)}")
```

-----

## Author

Gerhard Sonnenberg

DFKI GmbH